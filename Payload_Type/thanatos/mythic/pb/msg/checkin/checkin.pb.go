// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.6
// source: msg/checkin/checkin.proto

package checkin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Architecture int32

const (
	Architecture_X86    Architecture = 0
	Architecture_X86_64 Architecture = 1
)

// Enum value maps for Architecture.
var (
	Architecture_name = map[int32]string{
		0: "X86",
		1: "X86_64",
	}
	Architecture_value = map[string]int32{
		"X86":    0,
		"X86_64": 1,
	}
)

func (x Architecture) Enum() *Architecture {
	p := new(Architecture)
	*p = x
	return p
}

func (x Architecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Architecture) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_checkin_checkin_proto_enumTypes[0].Descriptor()
}

func (Architecture) Type() protoreflect.EnumType {
	return &file_msg_checkin_checkin_proto_enumTypes[0]
}

func (x Architecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Architecture.Descriptor instead.
func (Architecture) EnumDescriptor() ([]byte, []int) {
	return file_msg_checkin_checkin_proto_rawDescGZIP(), []int{0}
}

type ContainerEnv int32

const (
	ContainerEnv_NONE      ContainerEnv = 0
	ContainerEnv_DOCKER    ContainerEnv = 1
	ContainerEnv_CONTAINER ContainerEnv = 2
)

// Enum value maps for ContainerEnv.
var (
	ContainerEnv_name = map[int32]string{
		0: "NONE",
		1: "DOCKER",
		2: "CONTAINER",
	}
	ContainerEnv_value = map[string]int32{
		"NONE":      0,
		"DOCKER":    1,
		"CONTAINER": 2,
	}
)

func (x ContainerEnv) Enum() *ContainerEnv {
	p := new(ContainerEnv)
	*p = x
	return p
}

func (x ContainerEnv) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerEnv) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_checkin_checkin_proto_enumTypes[1].Descriptor()
}

func (ContainerEnv) Type() protoreflect.EnumType {
	return &file_msg_checkin_checkin_proto_enumTypes[1]
}

func (x ContainerEnv) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerEnv.Descriptor instead.
func (ContainerEnv) EnumDescriptor() ([]byte, []int) {
	return file_msg_checkin_checkin_proto_rawDescGZIP(), []int{1}
}

type WindowsProductType int32

const (
	WindowsProductType_UNKNOWN                      WindowsProductType = 0
	WindowsProductType_CORE                         WindowsProductType = 101
	WindowsProductType_PROFESSIONAL                 WindowsProductType = 48
	WindowsProductType_EDUCATION                    WindowsProductType = 121
	WindowsProductType_ENTERPRISE                   WindowsProductType = 4
	WindowsProductType_PRO_WORKSTATION              WindowsProductType = 161
	WindowsProductType_PRO_FOR_EDUCATION            WindowsProductType = 164
	WindowsProductType_ENTERPRISE_EVALUATION        WindowsProductType = 72
	WindowsProductType_DATACENTER_SERVER            WindowsProductType = 8
	WindowsProductType_DATACENTER_EVALUATION_SERVER WindowsProductType = 80
	WindowsProductType_DATACENTER_SERVER_CORE       WindowsProductType = 12
	WindowsProductType_DATACENTER_SERVER_CORE_V     WindowsProductType = 39
	WindowsProductType_DATACENTER_SERVER_V          WindowsProductType = 37
	WindowsProductType_ENTERPRISE_SERVER            WindowsProductType = 10
	WindowsProductType_ENTERPRISE_SERVER_CORE       WindowsProductType = 14
	WindowsProductType_ENTERPRISE_SERVER_CORE_V     WindowsProductType = 41
	WindowsProductType_ENTERPRISE_SERVER_V          WindowsProductType = 38
	WindowsProductType_HOME_BASIC                   WindowsProductType = 2
	WindowsProductType_STANDARD_SERVER              WindowsProductType = 7
	WindowsProductType_STANDARD_EVALUATION_SERVER   WindowsProductType = 79
	WindowsProductType_STANDARD_SERVER_CORE         WindowsProductType = 13
	WindowsProductType_STANDARD_SERVER_CORE_V       WindowsProductType = 40
	WindowsProductType_STANDARD_SERVER_V            WindowsProductType = 36
)

// Enum value maps for WindowsProductType.
var (
	WindowsProductType_name = map[int32]string{
		0:   "UNKNOWN",
		101: "CORE",
		48:  "PROFESSIONAL",
		121: "EDUCATION",
		4:   "ENTERPRISE",
		161: "PRO_WORKSTATION",
		164: "PRO_FOR_EDUCATION",
		72:  "ENTERPRISE_EVALUATION",
		8:   "DATACENTER_SERVER",
		80:  "DATACENTER_EVALUATION_SERVER",
		12:  "DATACENTER_SERVER_CORE",
		39:  "DATACENTER_SERVER_CORE_V",
		37:  "DATACENTER_SERVER_V",
		10:  "ENTERPRISE_SERVER",
		14:  "ENTERPRISE_SERVER_CORE",
		41:  "ENTERPRISE_SERVER_CORE_V",
		38:  "ENTERPRISE_SERVER_V",
		2:   "HOME_BASIC",
		7:   "STANDARD_SERVER",
		79:  "STANDARD_EVALUATION_SERVER",
		13:  "STANDARD_SERVER_CORE",
		40:  "STANDARD_SERVER_CORE_V",
		36:  "STANDARD_SERVER_V",
	}
	WindowsProductType_value = map[string]int32{
		"UNKNOWN":                      0,
		"CORE":                         101,
		"PROFESSIONAL":                 48,
		"EDUCATION":                    121,
		"ENTERPRISE":                   4,
		"PRO_WORKSTATION":              161,
		"PRO_FOR_EDUCATION":            164,
		"ENTERPRISE_EVALUATION":        72,
		"DATACENTER_SERVER":            8,
		"DATACENTER_EVALUATION_SERVER": 80,
		"DATACENTER_SERVER_CORE":       12,
		"DATACENTER_SERVER_CORE_V":     39,
		"DATACENTER_SERVER_V":          37,
		"ENTERPRISE_SERVER":            10,
		"ENTERPRISE_SERVER_CORE":       14,
		"ENTERPRISE_SERVER_CORE_V":     41,
		"ENTERPRISE_SERVER_V":          38,
		"HOME_BASIC":                   2,
		"STANDARD_SERVER":              7,
		"STANDARD_EVALUATION_SERVER":   79,
		"STANDARD_SERVER_CORE":         13,
		"STANDARD_SERVER_CORE_V":       40,
		"STANDARD_SERVER_V":            36,
	}
)

func (x WindowsProductType) Enum() *WindowsProductType {
	p := new(WindowsProductType)
	*p = x
	return p
}

func (x WindowsProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowsProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_checkin_checkin_proto_enumTypes[2].Descriptor()
}

func (WindowsProductType) Type() protoreflect.EnumType {
	return &file_msg_checkin_checkin_proto_enumTypes[2]
}

func (x WindowsProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowsProductType.Descriptor instead.
func (WindowsProductType) EnumDescriptor() ([]byte, []int) {
	return file_msg_checkin_checkin_proto_rawDescGZIP(), []int{2}
}

type CheckinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Data *CheckinData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CheckinInfo) Reset() {
	*x = CheckinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_checkin_checkin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckinInfo) ProtoMessage() {}

func (x *CheckinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msg_checkin_checkin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckinInfo.ProtoReflect.Descriptor instead.
func (*CheckinInfo) Descriptor() ([]byte, []int) {
	return file_msg_checkin_checkin_proto_rawDescGZIP(), []int{0}
}

func (x *CheckinInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CheckinInfo) GetData() *CheckinData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User           *string      `protobuf:"bytes,1,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Host           *string      `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Pid            *uint32      `protobuf:"varint,3,opt,name=pid,proto3,oneof" json:"pid,omitempty"`
	Architecture   Architecture `protobuf:"varint,4,opt,name=architecture,proto3,enum=msg.checkin.Architecture" json:"architecture,omitempty"`
	Domain         *string      `protobuf:"bytes,5,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
	IntegrityLevel *uint32      `protobuf:"varint,6,opt,name=integrity_level,json=integrityLevel,proto3,oneof" json:"integrity_level,omitempty"`
	ProcessName    *string      `protobuf:"bytes,7,opt,name=process_name,json=processName,proto3,oneof" json:"process_name,omitempty"`
	// Types that are assignable to PlatformInfo:
	//
	//	*CheckinData_Windows
	//	*CheckinData_Linux
	PlatformInfo isCheckinData_PlatformInfo `protobuf_oneof:"platform_info"`
	Ips          []*IpType                  `protobuf:"bytes,10,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *CheckinData) Reset() {
	*x = CheckinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_checkin_checkin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckinData) ProtoMessage() {}

func (x *CheckinData) ProtoReflect() protoreflect.Message {
	mi := &file_msg_checkin_checkin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckinData.ProtoReflect.Descriptor instead.
func (*CheckinData) Descriptor() ([]byte, []int) {
	return file_msg_checkin_checkin_proto_rawDescGZIP(), []int{1}
}

func (x *CheckinData) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *CheckinData) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *CheckinData) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CheckinData) GetArchitecture() Architecture {
	if x != nil {
		return x.Architecture
	}
	return Architecture_X86
}

func (x *CheckinData) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *CheckinData) GetIntegrityLevel() uint32 {
	if x != nil && x.IntegrityLevel != nil {
		return *x.IntegrityLevel
	}
	return 0
}

func (x *CheckinData) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (m *CheckinData) GetPlatformInfo() isCheckinData_PlatformInfo {
	if m != nil {
		return m.PlatformInfo
	}
	return nil
}

func (x *CheckinData) GetWindows() *WindowsInfo {
	if x, ok := x.GetPlatformInfo().(*CheckinData_Windows); ok {
		return x.Windows
	}
	return nil
}

func (x *CheckinData) GetLinux() *LinuxInfo {
	if x, ok := x.GetPlatformInfo().(*CheckinData_Linux); ok {
		return x.Linux
	}
	return nil
}

func (x *CheckinData) GetIps() []*IpType {
	if x != nil {
		return x.Ips
	}
	return nil
}

type isCheckinData_PlatformInfo interface {
	isCheckinData_PlatformInfo()
}

type CheckinData_Windows struct {
	Windows *WindowsInfo `protobuf:"bytes,8,opt,name=windows,proto3,oneof"`
}

type CheckinData_Linux struct {
	Linux *LinuxInfo `protobuf:"bytes,9,opt,name=linux,proto3,oneof"`
}

func (*CheckinData_Windows) isCheckinData_PlatformInfo() {}

func (*CheckinData_Linux) isCheckinData_PlatformInfo() {}

type IpType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ip:
	//
	//	*IpType_Ipv4
	//	*IpType_Ipv6
	Ip isIpType_Ip `protobuf_oneof:"ip"`
}

func (x *IpType) Reset() {
	*x = IpType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_checkin_checkin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpType) ProtoMessage() {}

func (x *IpType) ProtoReflect() protoreflect.Message {
	mi := &file_msg_checkin_checkin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpType.ProtoReflect.Descriptor instead.
func (*IpType) Descriptor() ([]byte, []int) {
	return file_msg_checkin_checkin_proto_rawDescGZIP(), []int{2}
}

func (m *IpType) GetIp() isIpType_Ip {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (x *IpType) GetIpv4() uint32 {
	if x, ok := x.GetIp().(*IpType_Ipv4); ok {
		return x.Ipv4
	}
	return 0
}

func (x *IpType) GetIpv6() []byte {
	if x, ok := x.GetIp().(*IpType_Ipv6); ok {
		return x.Ipv6
	}
	return nil
}

type isIpType_Ip interface {
	isIpType_Ip()
}

type IpType_Ipv4 struct {
	Ipv4 uint32 `protobuf:"varint,1,opt,name=ipv4,proto3,oneof"`
}

type IpType_Ipv6 struct {
	Ipv6 []byte `protobuf:"bytes,2,opt,name=ipv6,proto3,oneof"`
}

func (*IpType_Ipv4) isIpType_Ip() {}

func (*IpType_Ipv6) isIpType_Ip() {}

type LinuxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distro    *string      `protobuf:"bytes,1,opt,name=distro,proto3,oneof" json:"distro,omitempty"`
	Kernel    *string      `protobuf:"bytes,2,opt,name=kernel,proto3,oneof" json:"kernel,omitempty"`
	Selinux   bool         `protobuf:"varint,3,opt,name=selinux,proto3" json:"selinux,omitempty"`
	Container ContainerEnv `protobuf:"varint,4,opt,name=container,proto3,enum=msg.checkin.ContainerEnv" json:"container,omitempty"`
}

func (x *LinuxInfo) Reset() {
	*x = LinuxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_checkin_checkin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxInfo) ProtoMessage() {}

func (x *LinuxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msg_checkin_checkin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxInfo.ProtoReflect.Descriptor instead.
func (*LinuxInfo) Descriptor() ([]byte, []int) {
	return file_msg_checkin_checkin_proto_rawDescGZIP(), []int{3}
}

func (x *LinuxInfo) GetDistro() string {
	if x != nil && x.Distro != nil {
		return *x.Distro
	}
	return ""
}

func (x *LinuxInfo) GetKernel() string {
	if x != nil && x.Kernel != nil {
		return *x.Kernel
	}
	return ""
}

func (x *LinuxInfo) GetSelinux() bool {
	if x != nil {
		return x.Selinux
	}
	return false
}

func (x *LinuxInfo) GetContainer() ContainerEnv {
	if x != nil {
		return x.Container
	}
	return ContainerEnv_NONE
}

type WindowsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Build uint32 `protobuf:"varint,1,opt,name=build,proto3" json:"build,omitempty"`
	// Types that are assignable to Product:
	//
	//	*WindowsInfo_ProductType
	//	*WindowsInfo_Other
	Product isWindowsInfo_Product `protobuf_oneof:"product"`
}

func (x *WindowsInfo) Reset() {
	*x = WindowsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_checkin_checkin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsInfo) ProtoMessage() {}

func (x *WindowsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msg_checkin_checkin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsInfo.ProtoReflect.Descriptor instead.
func (*WindowsInfo) Descriptor() ([]byte, []int) {
	return file_msg_checkin_checkin_proto_rawDescGZIP(), []int{4}
}

func (x *WindowsInfo) GetBuild() uint32 {
	if x != nil {
		return x.Build
	}
	return 0
}

func (m *WindowsInfo) GetProduct() isWindowsInfo_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (x *WindowsInfo) GetProductType() WindowsProductType {
	if x, ok := x.GetProduct().(*WindowsInfo_ProductType); ok {
		return x.ProductType
	}
	return WindowsProductType_UNKNOWN
}

func (x *WindowsInfo) GetOther() uint32 {
	if x, ok := x.GetProduct().(*WindowsInfo_Other); ok {
		return x.Other
	}
	return 0
}

type isWindowsInfo_Product interface {
	isWindowsInfo_Product()
}

type WindowsInfo_ProductType struct {
	ProductType WindowsProductType `protobuf:"varint,2,opt,name=product_type,json=productType,proto3,enum=msg.checkin.WindowsProductType,oneof"`
}

type WindowsInfo_Other struct {
	Other uint32 `protobuf:"varint,3,opt,name=other,proto3,oneof"`
}

func (*WindowsInfo_ProductType) isWindowsInfo_Product() {}

func (*WindowsInfo_Other) isWindowsInfo_Product() {}

var File_msg_checkin_checkin_proto protoreflect.FileDescriptor

var file_msg_checkin_checkin_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x73, 0x67, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x2f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x73, 0x67,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x22, 0x4f, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x03, 0x0a, 0x0b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x12, 0x25, 0x0a, 0x03, 0x69, 0x70,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x2e, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x69, 0x70,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x06,
	0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x14, 0x0a, 0x04,
	0x69, 0x70, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x69, 0x70,
	0x76, 0x36, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x70, 0x22, 0xae, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x6e,
	0x75, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2a, 0x23, 0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x38, 0x36, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x10, 0x01, 0x2a, 0x33, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x10, 0x02, 0x2a, 0xad, 0x04, 0x0a, 0x12, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x30, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa1, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa4, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x45, 0x56,
	0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x48, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41,
	0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10,
	0x08, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x50, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x0c, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x56, 0x10, 0x27, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x56, 0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50,
	0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x52, 0x45, 0x5f, 0x56, 0x10, 0x29, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x56, 0x10, 0x26,
	0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x4f, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x0d, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x56, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x56,
	0x10, 0x24, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_checkin_checkin_proto_rawDescOnce sync.Once
	file_msg_checkin_checkin_proto_rawDescData = file_msg_checkin_checkin_proto_rawDesc
)

func file_msg_checkin_checkin_proto_rawDescGZIP() []byte {
	file_msg_checkin_checkin_proto_rawDescOnce.Do(func() {
		file_msg_checkin_checkin_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_checkin_checkin_proto_rawDescData)
	})
	return file_msg_checkin_checkin_proto_rawDescData
}

var file_msg_checkin_checkin_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_msg_checkin_checkin_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_msg_checkin_checkin_proto_goTypes = []any{
	(Architecture)(0),       // 0: msg.checkin.Architecture
	(ContainerEnv)(0),       // 1: msg.checkin.ContainerEnv
	(WindowsProductType)(0), // 2: msg.checkin.WindowsProductType
	(*CheckinInfo)(nil),     // 3: msg.checkin.CheckinInfo
	(*CheckinData)(nil),     // 4: msg.checkin.CheckinData
	(*IpType)(nil),          // 5: msg.checkin.IpType
	(*LinuxInfo)(nil),       // 6: msg.checkin.LinuxInfo
	(*WindowsInfo)(nil),     // 7: msg.checkin.WindowsInfo
}
var file_msg_checkin_checkin_proto_depIdxs = []int32{
	4, // 0: msg.checkin.CheckinInfo.data:type_name -> msg.checkin.CheckinData
	0, // 1: msg.checkin.CheckinData.architecture:type_name -> msg.checkin.Architecture
	7, // 2: msg.checkin.CheckinData.windows:type_name -> msg.checkin.WindowsInfo
	6, // 3: msg.checkin.CheckinData.linux:type_name -> msg.checkin.LinuxInfo
	5, // 4: msg.checkin.CheckinData.ips:type_name -> msg.checkin.IpType
	1, // 5: msg.checkin.LinuxInfo.container:type_name -> msg.checkin.ContainerEnv
	2, // 6: msg.checkin.WindowsInfo.product_type:type_name -> msg.checkin.WindowsProductType
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_msg_checkin_checkin_proto_init() }
func file_msg_checkin_checkin_proto_init() {
	if File_msg_checkin_checkin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msg_checkin_checkin_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CheckinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_checkin_checkin_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CheckinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_checkin_checkin_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*IpType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_checkin_checkin_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LinuxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_checkin_checkin_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*WindowsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_msg_checkin_checkin_proto_msgTypes[1].OneofWrappers = []any{
		(*CheckinData_Windows)(nil),
		(*CheckinData_Linux)(nil),
	}
	file_msg_checkin_checkin_proto_msgTypes[2].OneofWrappers = []any{
		(*IpType_Ipv4)(nil),
		(*IpType_Ipv6)(nil),
	}
	file_msg_checkin_checkin_proto_msgTypes[3].OneofWrappers = []any{}
	file_msg_checkin_checkin_proto_msgTypes[4].OneofWrappers = []any{
		(*WindowsInfo_ProductType)(nil),
		(*WindowsInfo_Other)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_checkin_checkin_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msg_checkin_checkin_proto_goTypes,
		DependencyIndexes: file_msg_checkin_checkin_proto_depIdxs,
		EnumInfos:         file_msg_checkin_checkin_proto_enumTypes,
		MessageInfos:      file_msg_checkin_checkin_proto_msgTypes,
	}.Build()
	File_msg_checkin_checkin_proto = out.File
	file_msg_checkin_checkin_proto_rawDesc = nil
	file_msg_checkin_checkin_proto_goTypes = nil
	file_msg_checkin_checkin_proto_depIdxs = nil
}
