name: Lint and check code for errors

on:
  push:
    branches:
      - dev
      - deps-refactor
    paths:
      - Payload_Type/thanatos/

  pull_request:
    branches:
      - main
      - dev
    paths:
      - Payload_Type/thanatos/


env:
  AGENT_CODE_PATH: Payload_Type/thanatos/agent
  MYTHIC_CODE_PATH: Payload_Type/thanatos/mythic

jobs:
  mythic:
    name: Mythic code checks
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.MYTHIC_CODE_PATH }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Poetry
        run: |
          python -m ensurepip
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install Python packages
        run: poetry install

      - name: Formatting
        run: poetry run black --color --diff --check thanatos

      - name: Linting
        run: poetry run pylint thanatos

  agent:
    name: Agent code checks
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.AGENT_CODE_PATH }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup cargo cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles(format('{0}/Cargo.toml', env.AGENT_CODE_PATH)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles(format('{0}/Cargo.toml', env.AGENT_CODE_PATH)) }}
            ${{ runner.os }}-cargo

      - name: Setup cargo target cache
        uses: actions/cache@v4
        with:
          path: ${{ env.AGENT_CODE_PATH }}/target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles(format('{0}/Cargo.toml', env.AGENT_CODE_PATH)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ hashFiles(format('{0}/Cargo.toml', env.AGENT_CODE_PATH)) }}
            ${{ runner.os }}-cargo-target

      - name: Install Clippy
        run: rustup component add clippy

      - name: Formatting
        run: cargo fmt -- --color always --check
        env:
          UUID: ""
          AESPSK: ""
          callback_host: ""
          callback_interval: ""
          callback_jitter: ""
          callback_port: ""
          connection_retries: ""
          encrypted_exchange_check: ""
          get_uri: ""
          headers: ""
          post_uri: ""
          working_hours: ""

      - name: Linting
        run: cargo clippy --color always --all-features --all-targets -- -D warnings
        env:
          UUID: ""
          AESPSK: ""
          callback_host: ""
          callback_interval: ""
          callback_jitter: ""
          callback_port: ""
          connection_retries: ""
          encrypted_exchange_check: ""
          get_uri: ""
          headers: ""
          post_uri: ""
          working_hours: ""
