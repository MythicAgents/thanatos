name: Run tests

on:
  workflow_call:

env:
  AGENT_CODE: Payload_Type/thanatos/agent
  MYTHIC_CODE: Payload_Type/thanatos/mythic

jobs:
  agent:
    name: Agent Tests

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup cargo cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles(format('{0}/Cargo.lock', env.AGENT_CODE)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles(format('{0}/Cargo.lock', env.AGENT_CODE)) }}
            ${{ runner.os }}-cargo

      - name: Setup cargo target cache
        uses: actions/cache@v4
        with:
          path: ${{ env.AGENT_CODE }}/target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles(format('{0}/Cargo.lock', env.AGENT_CODE)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ hashFiles(format('{0}/Cargo.lock', env.AGENT_CODE)) }}
            ${{ runner.os }}-cargo-target

      - name: Install protoc (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p /tmp/protoc
          pushd /tmp/protoc
          curl -L https://github.com/protocolbuffers/protobuf/releases/download/v25.3/protoc-25.3-linux-x86_64.zip -o protoc.zip
          unzip protoc.zip
          mv bin/protoc /usr/local/bin
          popd
          rm -rf /tmp/protoc

      - name: Install protoc (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          Invoke-WebRequest -Uri https://github.com/protocolbuffers/protobuf/releases/download/v25.3/protoc-25.3-win64.zip -OutFile protoc.zip
          Expand-Archive protoc.zip
          Copy-Item -Path .\protoc\bin\protoc.exe -Destination $env:SYSTEMROOT\System32\protoc.exe
          Remove-Item -Recurse .\protoc

      - name: Add Rust LLVM tools (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: rustup component add llvm-tools-preview

      - name: Install grcov (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          curl -L https://github.com/mozilla/grcov/releases/download/v0.8.19/grcov-x86_64-unknown-linux-gnu.tar.bz2 -o grcov.tar.bz2
          tar xvf grcov.tar.bz2
          mv grcov /usr/local/bin
          rm -rf grcov.tar.bz2

      - name: Run coverage tests
        if: ${{ runner.os == 'Linux' }}
        working-directory: ${{ env.AGENT_CODE }}
        run: |
          cargo build -p genconfig
          cargo test --color always --workspace --exclude genconfig --exclude config --all-features
        env:
          RUSTFLAGS: -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Cinstrument-coverage

      - name: Run tests
        if: ${{ runner.os == 'Windows' }}
        working-directory: ${{ env.AGENT_CODE }}
        run: |
          cargo build -p genconfig
          cargo test --color always --workspace --exclude genconfig --exclude config --all-features

      - name: Generate code coverage artifacts (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir coverage
          grcov ${AGENT_CODE} \
            -s . \
            --binary-path \
            ${AGENT_CODE}/target/debug \
            -t lcov \
            --branch \
            --ignore-not-existing \
            --ignore \
            "$HOME/.cargo/registry/*" \
            --ignore "*/target/*" \
            --ignore "**/build.rs" \
            --ignore "*/config/*" \
            -o agent-linux.lcov

      - name: Upload coverage artifacts (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v4
        with:
          name: Agent Code Coverage
          path: agent-linux.lcov

  mythic:
    name: Mythic Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.MYTHIC_CODE }}/go.mod
          cache-dependency-path: ${{ env.MYTHIC_CODE }}/go.sum

      - name: Install Go cover
        run: go install golang.org/x/tools/cmd/cover@latest

      - name: Install Golang modules
        working-directory: ${{ env.MYTHIC_CODE }}
        run: go mod download

      - name: Command tests
        working-directory: ${{ env.MYTHIC_CODE }}
        run: |
          mkdir -p ../../../coverage
          go test -coverprofile ../../../coverage/mythic.commands.gocov ./commands/...

      - name: Mockbuild tests
        working-directory: ${{ env.MYTHIC_CODE }}
        run: go test -coverprofile ../../../coverage/mythic.builder.gocov -run "^TestPayloadMockBuild/" ./builder

      - name: Filter unneeded test coverage results
        working-directory: coverage
        run: |
          sed -i '/^thanatos\/commands\/testing\/.*$/d' mythic.commands.gocov
          sed -i '/^thanatos\/commands\/commands\.go:.*$/d' mythic.commands.gocov
          sed -i '/^thanatos\/commands\/utils\/mythicrpc\.go:.*$/d' mythic.commands.gocov
          sed -i '/^thanatos\/builder\/testing.*\.go:.*$/d' mythic.builder.gocov
          sed -i '/^thanatos\/builder\/handlers\.go:.*$/d' mythic.builder.gocov

      - name: Combine test coverage results
        working-directory: coverage
        run: |
          cat mythic.builder.gocov > mythic.gocov
          grep "^thanatos" mythic.commands.gocov >> ../mythic.gocov

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Mythic Code Coverage
          path: mythic.gocov

  coverage:
    name: Merge coverage artifacts
    needs: [agent, mythic]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.MYTHIC_CODE }}/go.mod
          cache-dependency-path: ${{ env.MYTHIC_CODE }}/go.sum

      - name: Install Go cover
        run: go install golang.org/x/tools/cmd/cover@latest

      - name: Install lcov
        run: sudo apt-get install -y lcov

      - name: Create coverage directory
        run: mkdir -p coverage/html/{mythic,agent}

      - name: Download Agent coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: Agent Code Coverage
          path: coverage

      - name: Download Mythic coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: Mythic Code Coverage
          path: coverage

      - name: Generate Mythic coverage html
        working-directory: ${{ env.MYTHIC_CODE }}
        run: go tool cover -html ../../../coverage/mythic.gocov -o ../../../coverage/html/mythic/index.html

      - name: Generate Agent coverage html
        run: |
          genhtml \
            -o coverage/html/agent \
            --show-details \
            --highlight \
            --ignore-errors source \
            --legend \
            coverage/agent-linux.lcov

      - name: Create coverage artifact
        run: zip -r coverage.zip coverage/

      - name: Upload combined coverage
        uses: actions/upload-artifact@v4
        with:
          name: Code Coverage Artifacts
          path: coverage.zip
