# Name for the Github actions workflow
name: Build and push the base container image

on:
  # Only run workflow when there is a new release published in Github
  release:
    types: [published]

# Variables holding configuration settings
env:
  # Container registry the built container image will be pushed to
  REGISTRY: ghcr.io

  # Set the container image name to the Github repository name. (MythicAgents/thanatos)
  IMAGE_NAME: ${{ github.repository }}

  # Description label for the package in Github
  IMAGE_DESCRIPTION: "Base container image for the Thanatos Mythic C2 agent"

  # Source URL for the package in Github. This links the Github repository packages list
  # to this container image
  IMAGE_SOURCE: ${{ github.server_url }}/${{ github.repository }}

  # License for the container image
  IMAGE_LICENSE: BSD-3-Clause

  # Set the container image version to the Github release tag
  VERSION: ${{ github.event.release.tag_name }}

  # Branch for pushing release changes
  RELEASE_BRANCH: rewrite

jobs:
  # Builds the base container image and pushes it to the container registry
  build-and-push-image:
    runs-on: ubuntu-latest

    # Provision an ephemeral Github token for the workflow which is capable of pushing
    # Github packages and pushing code
    permissions:
      contents: write
      packages: write

    steps:
      # Pull in the repository code
      - name: Checkout the repository
        uses: actions/checkout@v4 # ref: https://github.com/marketplace/actions/checkout

      # Log in to the configured container registry using the ephemeral Github token
      - name: Log in to the container registry
        uses: docker/login-action@v3 # ref: https://github.com/marketplace/actions/docker-login
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Container image names need to be lowercased. This changes the 'IMAGE_NAME'
      # variable to all lowercase letters
      - name: Lowercase the container image name
        run: echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      # Build and push the base container image with the specified tag and labels
      - name: Build and push the container image
        uses: docker/build-push-action@v5 # ref: https://github.com/marketplace/actions/build-and-push-docker-images
        with:
          context: Payload_Type/thanatos
          file: Payload_Type/thanatos/.docker/Dockerfile
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          push: true
          # These container metadata labels allow configuring the package in Github
          # packages. The source will link the package to this Github repository
          labels: |
            org.opencontainers.image.source=${{ env.IMAGE_SOURCE }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.licenses=${{ env.IMAGE_LICENSE }}

      # The Dockerfile which Mythic uses to pull in the base container image needs to be
      # updated to reference the newly built container image
      - name: Fix the Dockerfile reference to reference the new release tag
        working-directory: Payload_Type/thanatos
        run: |
          sed -i "s|^FROM .*$|FROM ${REGISTRY}/${IMAGE_NAME}:${VERSION}|" Dockerfile

      # Push the changes to the Dockerfile
      - name: Push the updated base Dockerfile image reference changes
        uses: EndBug/add-and-commit@v9 # ref: https://github.com/marketplace/actions/add-commit
        with:
          # Only add the Dockerfile changes. Nothing else should have been modified
          add: Payload_Type/thanatos/Dockerfile

          # Use the Github actions bot for the commit author
          default_author: github_actions
          committer_email: github-actions[bot]@users.noreply.github.com

          # Set the commit message
          message: "Bump Mythic Dockerfile tag to match release '${{ env.VERSION }}'"

          # Overwrite the current git tag with the new changes
          tag: '${{ env.VERSION }} --force'

          # Push the new changes with the tag overwriting the current one
          tag_push: '--force'

          # Push the commits to the branch marked as the release branch
          push: origin HEAD:${{ env.RELEASE_BRANCH }} --set-upstream

          # Have the workflow fail in case there are pathspec issues
          pathspec_error_handling: exitImmediately
